# Data Subscriptions: Creation and Update API Overview

---

{NOTE: }

* In this page:  
   * [Subscription Creation](../../../client-api/data-subscriptions/creation/api-overview#subscription-creation)  
   * [SubscriptionCreationOptions](../../../client-api/data-subscriptions/creation/api-overview#subscriptioncreationoptions)  
   * [Update Subscription](../../../client-api/data-subscriptions/creation/api-overview#update-subscription)  
   * [SubscriptionUpdateOptions](../../../client-api/data-subscriptions/creation/api-overview#subscriptionupdateoptions)  
   * [Subscription query](../../../client-api/data-subscriptions/creation/api-overview#subscription-query)  

{NOTE/}

---

{PANEL:Subscription Creation}

Subscriptions can be created using the `create_for_options` and `create_for_class` methods.  
{CODE:python subscriptionCreationOverloads@ClientApi\DataSubscriptions\DataSubscriptions.py /}

| Parameter | Type | Description |
| ------------- | ------------- | ----- |
| **options** | `SubscriptionCreationOptions` | Contains subscription creation options |
| **database** (Optional) | `[str]` | Name of database to create a data subscription. If `None`, default database configured in DocumentStore will be used. |
| **object_type** | `Type[_T]` | Predicate describing the subscription documents filter |

| Return value | Description |
| ------------- | ----- |
| `str` | Created data subscription name. If the name was provided in `SubscriptionCreationOptions`, it will be returned. Otherwise, a unique name will be generated by the server. |

{PANEL/}

{PANEL:SubscriptionCreationOptions}

An RQL statement will be built based on the fields.  
{CODE:python sub_create_options@ClientApi\DataSubscriptions\DataSubscriptions.py /}

| Member | Type | Description |
|--------|:-----|-------------| 
| **name** (Optional) | `str` | User-defined name of the subscription: allows to have a human readable identification of a subscription. The name must be unique in the database. |
| **query** (Optional) | `str` | RQL query that describes the subscription. This RQL comes with additional support to JavaScript clause inside the `where` statement and special semantics for subscriptions on documents revisions. |
| **change_vector** (Optional) | `str` | Allows to define a change vector, from which the subscription will start processing. It might be useful for ad-hoc processes that need to process only recent changes in data, for that specific use, the field may receive a special value: "LastDocument", that will take the latest change vector in the machine. |
| **mentor_node** (Optional) | `str` | Allows to define a specific node in the cluster that we want to treat the subscription. That's useful in cases when one server is preffered over other, either because of stronger hardware or closer geographic proximity to clients etc. |
| **includes** (Optional) | `[Callable[[SubscriptionIncludeBuilder]` | Action with a [SubscriptionIncludeBuilder](../../../client-api/data-subscriptions/creation/examples#create-subscription-with-include-statement) parameter that allows you to define an include clause for the subscription. Methods can be chained to include documents as well as [counters](../../../client-api/data-subscriptions/creation/examples#including-counters). |

{PANEL/}

{PANEL: Update Subscription}

Modifies an existing data subscription. These methods are accessible at `DocumentStore.Subscriptions`.  

{CODE:python updating_subscription@ClientApi\DataSubscriptions\DataSubscriptions.py /}

| Parameter | Type | Description |
| - | - | - |
| **options** | `SubscriptionUpdateOptions` | A subscription update options object |
| **database** (Optional) | `str` | Name of database to create a data subscription. If `None`, default database configured in DocumentStore will be used. |

| Return value | Description |
| ------------- | ----- |
| `str` | The updated data subscription's name. |

{PANEL/}

{PANEL: SubscriptionUpdateOptions}

Inherits from `SubscriptionCreationOptions` and has all the same fields (see [above](../../../client-api/data-subscriptions/creation/api-overview#subscriptioncreationoptions)) plus the two additional fields described below:  

{CODE:python sub_update_options@ClientApi\DataSubscriptions\DataSubscriptions.py /}

| Parameter | Type | Description |
| - | - | - |
| **key** (Optional) | `int` | Unique server-side ID of the data subscription. `key` can be used instead of the subscription update options `name` field, and takes precedence over it. This allows you to change the subscription's name: submit a subscription's ID, and submit a different name in the `name` field. |
| **create_new** (Optional) | `bool` | If set to `True`, and the specified subscription does not exist, the subscription is created. If set to `False`, and the specified subscription does not exist, an exception is thrown. |

{PANEL/}

{PANEL: Subscription query} 

All subscriptions, are eventually translated to an RQL-like statement. These statements has four parts:

* Functions definition part, like in ordinary RQL. Those functions can contain any JavaScript code,
  and also supports `load` and `include` operations.

* From statement, defining the documents source, ex: `from Orders`. The from statement can only address collections, therefore, indexes are not supported.    

* Where statement describing the criteria according to which it will be decided to either 
send the documents to the worker or not. Those statements supports either RQL like `equality` operations (`=`, `==`) ,  
plain JavaScript expressions or declared function calls, allowing to perform complex filtering logic.  
The subscriptions RQL does not support any of the known RQL searching keywords.

* Select statement, that defines the projection to be performed. 
The select statements can contain function calls, allowing complex transformations.

* Include statement allowing to define include path in document.  

{INFO: Keywords}
Although subscription's query syntax has an RQL-like structure, it supports only the `declare`, `select` and `where` keywords, usage of all other RQL keywords is not supported.  
Usage of JavaScript ES5 syntax is supported.
{INFO/}

{INFO: Paths}
Paths in subscriptions RQL statements are treated as JavaScript indirections and not like regular RQL paths.  
It means that a query that in RQL would look like:  

```
from Orders as o
where o.Lines[].Product = "products/1-A"
```

Will look like that in subscriptions RQL:

```
declare function filterLines(doc, productId)
{
    if (!!doc.Lines){
        return doc.Lines.filter(x=>x.Product == productId).length >0;
    }
    return false;
}

from Orders as o
where filterLines(o, "products/1-A")
```
{INFO/}  

{PANEL/}

## Related Articles

**Data Subscriptions**:  

- [What are Data Subscriptions](../../../client-api/data-subscriptions/what-are-data-subscriptions)
- [How to Create a Data Subscription](../../../client-api/data-subscriptions/creation/how-to-create-data-subscription)
- [How to Consume a Data Subscription](../../../client-api/data-subscriptions/consumption/how-to-consume-data-subscription)

**Knowledge Base**:

- [JavaScript Engine](../../../server/kb/javascript-engine)


