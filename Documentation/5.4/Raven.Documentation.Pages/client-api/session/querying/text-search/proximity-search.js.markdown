# Proximity Search

---

{NOTE: }

* A __proximity search__ retrieves documents containing search terms that are located within a specified distance from each other.
  The distance is measured by the number of intermediate terms.
 
* Use the `proximity` method when running a __full-text search__ by the [search](../../../../client-api/session/querying/text-search/full-text-search) method.

* In this page:
    * [Why use proximity search](../../../../client-api/session/querying/text-search/proximity-search#why-use-proximity-search)
    * [How proximity works](../../../../client-api/session/querying/text-search/proximity-search#how-proximity-works)
    * [Proximity search examples](../../../../client-api/session/querying/text-search/proximity-search#proximity-search-examples)
    * [Syntax](../../../../client-api/session/querying/text-search/proximity-search#syntax)

{NOTE/}

---

{PANEL: Why use proximity search}

* A basic linguistic assumption is that the proximity of words implies a relationship between them.  

* Proximity search helps match phrases while avoiding scattered or spread-out terms in the text.

* By limiting the search to only include matches where the terms are within the specified maximum proximity,  
  the search results can be more relevant than those with scattered terms.

{PANEL/}

{PANEL: How proximity works}

* When searching with some specified distance between search terms `term1` and `term2`:

    * Retrieved documents will contain text in which `term1` and `term2` are separated by  
      the maximum number of terms specified or less.

    * The search terms can be separated by fewer terms, but not more than the specified distance.

    * Only the terms generated by the [search analyzer](../../../../indexes/using-analyzers#ravendb) 
      are considered towards the count of the maximum distance.  
      Words or tokens that are Not part of the generated terms are Not included in the proximity calculation.

* Note:

    * Search criteria should contain at least 2 search terms.

    * Search terms must be simple string terms without wildcards.

{PANEL/}

{PANEL: Proximity search examples}

{NOTE: }

__Proximity search (0 distance)__

{CODE-TABS}
{CODE-TAB:nodejs:Query proximity_1@client-api\session\querying\textSearch\proximitySearch.js /}
{CODE-TAB-BLOCK:sql:RQL}
from "Employees"
where proximity(search(Notes, "fluent french"), 0)
{CODE-TAB-BLOCK/}
{CODE-TABS/}

{NOTE/}

{NOTE: }

__Proximity search (distance > 0)__

{CODE-TABS}
{CODE-TAB:nodejs:Query proximity_2@client-api\session\querying\textSearch\proximitySearch.js /}
{CODE-TAB-BLOCK:sql:RQL}
from "Employees"
where proximity(search(Notes, "fluent french"), 5)
{CODE-TAB-BLOCK/}
{CODE-TABS/}

{NOTE/}

{PANEL/}

{PANEL: Syntax}

{CODE:nodejs syntax@client-api\session\querying\textSearch\proximitySearch.js /}

| Parameter     | Type     | Description                                                                                |
|---------------|----------|--------------------------------------------------------------------------------------------|
| __proximity__ | `number` | The maximum number of terms between the search terms.<br>Can be greater or equal to `0`.   |

{PANEL/}

## Related Articles

### Session

- [Full-text search](../../../../client-api/session/querying/text-search/full-text-search)
- [Query overview](../../../../client-api/session/querying/how-to-query)
- [What is a DocumentQuery](../../../../client-api/session/querying/document-query/what-is-document-query)
