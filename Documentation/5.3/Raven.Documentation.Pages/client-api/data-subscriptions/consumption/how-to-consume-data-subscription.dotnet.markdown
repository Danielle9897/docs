# Data Subscriptions: How to Consume a Data Subscription

---

{NOTE: }

Subscriptions are consumed by processing batches of documents received from the server. 
A `SubscriptionWorker` object manages the documents processing and the communication between the client and the server according to a set of configurations received upon it's creation. 
We've introduced several ways to create and configure a SubscriptionWorker, starting from just giving a subscription name, and ending with a detailed configuration object - `SubscriptionWorkerOptions`.

In this page:

[SubscriptionWorker lifecycle](../../../client-api/data-subscriptions/consumption/how-to-consume-data-subscription#subscriptionworker-lifecycle)  
[Error handling](../../../client-api/data-subscriptions/consumption/how-to-consume-data-subscription#error-handling)  
[Worker interplay](../../../client-api/data-subscriptions/consumption/how-to-consume-data-subscription#worker-interplay)

{NOTE/}

---

{PANEL:SubscriptionWorker lifecycle}
A `SubscriptionWorker` object starts its life from being generated by the `DocumentsStore.Subscriptions`:

{CODE subscription_open_simple@ClientApi\DataSubscriptions\DataSubscriptions.cs /}

At this point, the worker has only got its configuration. No connection or processing happens at this moment. 
In order to start processing, the `Run` method should be called. The Run method receives the batch processing logic that should be performed:

{CODE subscription_run_simple@ClientApi\DataSubscriptions\DataSubscriptions.cs /}

From this point on, the subscription worker will start processing batches. If for any reason, the processing is aborted, and the returned task (`subscriptionRuntimeTask`) will be finished with an exception.

{PANEL/}


{PANEL:Error handling}
There are two categories of errors that may occur during subscription processing:

{INFO:Internal mechanism errors}
Those errors occur during the normal server-client communication between the worker and the server.  
If an unexpected error occurs, the worker will try to reconnect to the server. There are conditions in which the worker will cease its operation and will not try to reconnect:  

* The subscription does not exist or was deleted  
* Another worker took over the subscription (see connection strategy)
* The worker could not connect to any of the servers
* The worker could not receive the node in charge of the task (this can happen when there is no leader)
* Authorization exception
* Exception during connection establishment

{INFO/}

{INFO:User's batch processing logic unhandled exception}
Example:
{CODE throw_during_user_logic@ClientApi\DataSubscriptions\DataSubscriptions.cs /}

If an exception is thrown, the worker will abort the current batch process. 
A worker can be configured to treat the thrown exception by either of the following two ways:  

* By default, the worker will wrap the thrown exception with a `SubscriberErrorException` exception and rethrow it,  
  terminating the subscription execution without acknowledging progress or retrying. The task returned by the `Run` function will
  be terminated with an erroneous state, throwing a `SubscriberErrorException` exception.

* If `SubscriptionWorkerOptions`'s value `IgnoreSubscriberErrors` is set to true, the erroneous batch will get acknowledged without retrying and the next batches will continue processing. 
{INFO/}

{INFO: Reconnecting}
In the cases above, we described situations in which a worker will try to reconnect with the server. There are two key `SubscriptionWorkerOptions` fields controlling this state:

*  `TimeToWaitBeforeConnectionRetry` - The time that the worker will 'sleep' before trying to reconnect.
* `MaxErroneousPeriod` - The maximum time in which the worker is allowed to be in erroneous state. After that time passes, the worker will stop trying to reconnect
{INFO/}

{INFO: OnUnexpectedSubscriptionError}
`OnUnexpectedSubscriptionError` is the event raised when a connection failure occurs 
between the subscription worker and the server and it throws an unexpected exception. 
When this occurs, the worker will automatically try to reconnect again. This event is 
useful for logging these unexpected exceptions.
{INFO/}

{PANEL/}

{PANEL: Worker interplay}

* Subscription workers are configured with a **strategy**, that determines whether 
  they can connect their subscription **concurrently**, or only one at a time.  
* If a one-at-a-time strategy is chosen, it also determines how the workers 
  interact with each other to resolve which will connect the subscription.  

{NOTE: }
The strategy is configured by the `SubscriptionWorkerOptions` `Strategy` field.  
The strategy field is the enum `SubscriptionOpeningStrategy`.  

| `SubscriptionOpeningStrategy` | |
| ------------- | ------------- |
| `OpenIfFree` | Connect if no other worker is connected |
| `WaitForFree` | Wait for currently connected worker to disconnect |
| `TakeOver` | Take over the connection |
| `Concurrent` | Connect concurrently |



{NOTE/}

### One Worker Per Subscription Strategies 

The following three strategies allow only a **single worker to connect 
the subscription at any given time**, and determine what happens when one 
worker is connected and another tries to connect.  

* `SubscriptionOpeningStrategy.OpenIfFree`  
  The server will allow the worker to connect only if there is currently 
  no other connected worker.  
  If there is a existing connection, the incoming worker will throw a 
  `SubscriptionInUseException`.  
* `SubscriptionOpeningStrategy.WaitForFree`  
  If the client currently cannot open the subscription because it is used 
  by another client, it will wait for the previous client to disconnect and 
  connect only then.  
  This is useful in client failover scenarios, where there is one active 
  client and another already waits to take its place.  
* `SubscriptionOpeningStrategy.TakeOver`  
  The server will allow an incoming connection to overthrow an existing one, 
  according to the existing connection strategy:
   * The existing connection **does not** have a `TakeOver` strategy.  
     The incoming connection will take over, causing the existing 
     connection to throw a `SubscriptionInUseException`.  
   * The existing connection **has** a `TakeOver` strategy.  
     The incoming connection will throw a SubscriptionInUseException exception.  

### Concurrent Subscription Strategy 

* `SubscriptionOpeningStrategy.Concurrent`  
  Multiple workers of the same subscription are allowed to connect it simultaneously.  
  Read more about concurrent subscriptions [here](../../../client-api/data-subscriptions/concurrent-subscriptions).  

{PANEL/}

## Related Articles  

### Data Subscriptions  

- [What are Data Subscriptions](../../../client-api/data-subscriptions/what-are-data-subscriptions)  
- [How to Create a Data Subscription](../../../client-api/data-subscriptions/creation/how-to-create-data-subscription)  
