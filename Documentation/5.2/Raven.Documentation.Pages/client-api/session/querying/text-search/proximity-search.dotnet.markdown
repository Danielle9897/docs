# Proximity Search

---

{NOTE: }

* A __proximity search__ retrieves documents containing search terms that are located within a specified distance from each other.
  The distance is measured by the number of intermediate terms.

* Proximity search is available only via [DocumentQuery](../../../../client-api/session/querying/document-query/what-is-document-query) or RQL.  
 
* Use the `Proximity` method when making a __full-text search__ using the `Search` method.  
  * Search criteria should contain least 2 search terms.  
  * Search terms must be simple string terms without wildcards.  

* In this page:
    * [Why use proximity search](../../../../client-api/session/querying/text-search/proximity-search#why-use-proximity-search)
    * [Proximity search (0 distance)](../../../../client-api/session/querying/text-search/proximity-search#proximity-search-(0-distance))
    * [Proximity search (distance > 0)](../../../../client-api/session/querying/text-search/proximity-search#proximity-search-(distance->-0))
    * [Syntax](../../../../client-api/session/querying/text-search/proximity-search#syntax)

{NOTE/}

---

{PANEL: Why use proximity search}

* A basic linguistic assumption is that the proximity of the words implies a relationship between them.  

* Proximity search helps match phrases while avoiding scattered or spread-out terms in the text.

* By limiting the search to only include matches where the terms are within the specified maximum proximity,  
  the search results can be more relevant than those with scattered terms.

{PANEL/}

{PANEL: Proximity search (0 distance)}

When searching with __0__ distance between `term1` and `term2`,  
documents that will be returned will have __either of the following__:  

  * Text where term1 and term2 are consecutive.  
    E.g.: `"term1 term2"`  

  * Text where term1 and term2 are separated, but only by words that were Not tokenized by the analyzer.  
    E.g.: `"term1 in term2"`  
    The word "in" is Not part of the terms list generated by the [default search analyzer](../../../../indexes/using-analyzers#ravendb) used in the below query.

{CODE-TABS}
{CODE-TAB:csharp:DocumentQuery proximity_1@ClientApi\Session\Querying\TextSearch\ProximitySearch.cs /}
{CODE-TAB:csharp:DocumentQuery_async proximity_2@ClientApi\Session\Querying\TextSearch\ProximitySearch.cs /}
{CODE-TAB-BLOCK:sql:RQL}
from "Employees"
where proximity(search(Notes, "fluent french"), 0)
{CODE-TAB-BLOCK/}
{CODE-TABS/}

{PANEL/}

{PANEL: Proximity search (distance > 0)}

When searching with a distance __> 0__ between `term1` and `term2`:

  * Documents that will be returned will contain text where term1 and term2 are separated by  
    a __maximum__ of the number specified or less.

  * The search terms can be separated by fewer terms, but not more than the specified distance.

  * Only the terms generated by the search analyzer are considered towards the count of the maximum distance.  
    Words or tokens that are not part of the generated terms are Not included in the proximity calculation.

{CODE-TABS}
{CODE-TAB:csharp:DocumentQuery proximity_3@ClientApi\Session\Querying\TextSearch\ProximitySearch.cs /}
{CODE-TAB:csharp:DocumentQuery_async proximity_4@ClientApi\Session\Querying\TextSearch\ProximitySearch.cs /}
{CODE-TAB-BLOCK:sql:RQL}
from "Employees"
where proximity(search(Notes, "fluent french"), 5)
{CODE-TAB-BLOCK/}
{CODE-TABS/}

{PANEL/}

{PANEL: Syntax}

{CODE syntax@ClientApi\Session\Querying\TextSearch\ProximitySearch.cs /}

| Parameter     | Type  | Description                                          |
|---------------|-------|------------------------------------------------------|
| __proximity__ | `int` | The maximum number of terms between the search terms |

{PANEL/}

## Related Articles

### Session

- [Full-text search](../../../../client-api/session/querying/text-search/full-text-search)
- [Query overview](../../../../client-api/session/querying/how-to-query)
- [What is a DocumentQuery](../../../.../client-api/session/querying/document-query/what-is-document-query)
